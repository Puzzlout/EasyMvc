<?php

namespace Library\Core;

use Library\Enums;

if (!FrameworkConstants_ExecutionAccessRestriction) {
  exit('No direct script access allowed');
}

abstract class Application {

  public $HttpRequest;
  protected $httpResponse;
  public $name;
  public $locale;
  public $localeDefault;
  public $pageTitle;
  public $logoImageUrl;
  public $globalResources;
  public $relative_path;
  public $user;
  public $config;
  public $i8n;
  public $imageUtil;
  public $jsManager;
  public $cssManager;
  public $auth;
  public $dal;
  public $toolTip;
  protected $security;

  public function __construct() {
    $this->httpRequest = new HttpRequest($this);
    $this->httpResponse = new HttpResponse($this);
    $this->user = new User($this);
    $this->config = new Config($this);
    $this->context = new Context($this);
    $this->i8n = new Globalization($this);
    $this->imageUtil = new \Library\Utility\ImageUtility($this);

    $this->router = new Router($this);
    $this->locale = $this->httpRequest->initLanguage($this, "browser");
    $this->name = '';
    $this->auth = new \Library\Security\AuthenticationManager($this);
    $this->dal = new \Library\Dal\Managers('PDO', $this);
    $this->toolTip = new PopUpResourceManager($this);
    $this->security = new \Library\Security\Encryption($this->config);
//    $this->jsManager = new Core\Utility\JavascriptManager($this);
//    $this->cssManager = new Core\Utility\CssManager($this);
  }

  public function initConfig() {
    
  }

  public function getController() {

    $this->router()->setCurrentRoute($this->FindRouteMatch());
    $this->relative_path = $this->router()->currentRoute()->relative_path;
    $this->globalResources["js_files_head"] = $this->router()->currentRoute()->headJsScripts();
    $this->globalResources["js_files_html"] = $this->router()->currentRoute()->htmlJsScripts();
    $this->globalResources["css_files"] = $this->router()->currentRoute()->cssFiles();

    if (preg_match("`.*ws$`", $this->router()->currentRoute()->type())) {//is the route used for AJAX calls?
      $this->router()->isWsCall = true;
    }
    // On ajoute les variables de l'URL au tableau $_GET.
    $_GET = array_merge($_GET, $this->router()->currentRoute()->vars());

    $controllerClass = $this->BuildControllerClass($this->router()->currentRoute());
    if (!file_exists(FrameworkConstants_RootDir . str_replace('\\', '/', $controllerClass) . \Library\Enums\FileNameConst::Extension)) {
      $error = new \Library\BO\Error(
              \Library\Enums\ErrorCode::ControllerNotExist, Enums\ErrorOrigin::Library, "Controller not found", "The controller " . $controllerClass . " doesn't exist.");
      $this->httpResponse->displayError($error);
    }
    return new $controllerClass($this, $this->router()->currentRoute()->module(), $this->router()->currentRoute()->action(), $this->router()->currentRoute()->resxfile());
  }

  abstract public function run();

  public function HttpRequest() {
    return $this->httpRequest;
  }

  public function httpResponse() {
    return $this->httpResponse;
  }

  public function user() {
    return $this->user;
  }

  public function config() {
    return $this->config;
  }

  public function context() {
    return $this->context;
  }

  public function i8n() {
    return $this->i8n;
  }

  public function router() {
    return $this->router;
  }

  public function name() {
    return $this->name;
  }

  public function css() {
    return $this->cssManager;
  }

  public function js() {
    return $this->jsManager;
  }

  public function auth() {
    return $this->auth;
  }
  public function dal() {
    return $this->dal;
  }

  public function toolTip() {
    return $this->toolTip;
  }

  public function security() {
    return $this->security;
  }
  private function FindRouteMatch() {
    try {
      // On récupère la route correspondante à l'URL.
      return $this->router->getRoute($this->httpRequest->requestURI());
    } catch (\RuntimeException $e) {
      if ($e->getCode() == \Library\Core\Router::NO_ROUTE) {
        // Si aucune route ne correspond, c'est que la page demandée n'existe pas.
        $error = new \Library\BO\Error(
                \Library\Enums\ErrorCode::PageNotFound, "routing", "Page not found", "The route " . $this->httpRequest->requestURI() . " is not found."
        );
        $this->httpResponse->displayError($error);
      }
    }
  }

  /**
   * Build the string of the controller class to load for the current route
   * 
   * @param \Library\Core\Route $route : the current route
   * @return string : the controller class name w/ namespace
   */
  private function BuildControllerClass(\Library\Core\Route $route) {
    if (preg_match("`^lib.*$`", $route->type())) {
//AJAX request for the Framework
      return \Library\Enums\NameSpaceName::LibFolderName
              . \Library\Enums\NameSpaceName::LibControllersFolderName
              . $route->module()
              . \Library\Enums\FileNameConst::ControllerSuffix;
    } else {
//AJAX request for the Application
      return \Library\Enums\NameSpaceName::AppsFolderName . "\\"
              . $this->name
              . \Library\Enums\NameSpaceName::AppsControllersFolderName
              . $route->module()
              . \Library\Enums\FileNameConst::ControllerSuffix;
    }
  }

}

