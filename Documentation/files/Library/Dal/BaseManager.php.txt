<?php

/**
 * Handles the database queries.
 * 
 * @author Jeremie Litzler
 * @copyright Copyright (c) 2015
 * @licence http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link https://github.com/WebDevJL/EasyMVC
 * @since Version 1.0.0
 * @packageÂ BaseManager
 */

namespace Library\Dal;

if (!FrameworkConstants_ExecutionAccessRestriction) {
  exit('No direct script access allowed');
}

class BaseManager extends \Library\Dal\Manager {

  const INSERTCOLUMNS = "INSERTCOLUMNS";
  const INSERTVALUES = "INSERTVALUES";

  public function __construct($dao, $filters) {
    parent::__construct($dao, $filters);
  }

  /**
   * Select method for one item
   *
   * @param array $item array containing the data to use to build the SQL statement
   */
  public function selectOne($item) {
    
  }

  /**
   * Update method for one item
   *
   * @param array $item array containing the data to use to build the SQL statement
   */
  public function update($item) {
    
  }

  /**
   * Select method for many items
   * 
   * @param object 
   * $object: Dao object
   * @param mixed
   * $where_filter_id: a string or integer value
   * representing the column name to filter the data on. It is used in the WHERE clause.
   * @param bool
   * $filter_as_string: TRUE or FALSE to know if a where filter is a string or a integer 
   * @return mixed
   * Can be a bool (TRUE,FALSE), a integer or a list of Dao objects (of type  $dao_class) 
   */
  public function selectMany($object, $where_filter_id, $filter_as_string = false) {
    $this->dbConfig()->setType(DbExecutionType::SELECT);
    $this->dbConfig()->setDaoClassName(\Library\Helpers\CommonHelper::GetFullClassName($object));
    if ($where_filter_id !== "") {
      $where_clause = " WHERE " . $where_filter_id . " = :where_filter_id";
    } else {
      $where_clause = "";
    }

    $order_by = "";
    if ($object->getOrderByField() !== FALSE) {
      $order_by = "ORDER BY " . $object->getOrderByField();
    }
    $select_clause = "SELECT ";
    foreach ($object as $key => $value) {
      $select_clause .= $key . ", ";
    }
    $select_clause = rtrim($select_clause, ", ");
    $select_clause .= " FROM " . $this->GetTableName($object) . $where_clause . " " . $order_by;
    $sth = $this->dao->prepare($select_clause);
    if ($where_filter_id !== "") {
      if ($filter_as_string) {
        $sth->bindValue(':where_filter_id', $object->$where_filter_id(), \PDO::PARAM_STR);
      } else {
        $sth->bindValue(':where_filter_id', $object->$where_filter_id(), \PDO::PARAM_INT);
      }
    }

    return $this->ExecuteQuery($sth, $params);
  }

  /**
   * 
   * @param type $object
   * @param type $where_filters
   * @return type
   */
  public function selectManyComplex($object, $where_filters) {
    $this->dbConfig()->setType(DbExecutionType::SELECT);
    $this->dbConfig()->setDaoClassName(\Library\Helpers\CommonHelper::GetFullClassName($object));
    $select_clause = "SELECT ";
    //TODO: implement building the where clause with one or many filters
    $where_clause = ""; //$this->BuildWhereClause($where_filters);
    foreach ($object as $key => $value) {
      $select_clause .= $key . ", ";
    }
    $select_clause = rtrim($select_clause, ", ");
    $select_clause.=" FROM " . $this->GetTableName($object);
    $order_by = "";
    if ($object->getOrderByField() !== FALSE) {
      $order_by = "ORDER BY " . $object->getOrderByField();
    }
    $select_clause .= $where_clause . " " . $order_by;

    $sth = $this->dao->prepare($select_clause);
    return $this->ExecuteQuery($sth, $params);
  }

  /**
   * Select method to get a count by id
   *
   * @param int $id
   */
  public function countById($id) {
    
  }

  /**
   * Add method to add a item to DB
   *
   * @param object $item
   */
  public function add($object) {
    $this->dbConfig()->setTableName($this->GetTableName($object));
    $this->dbConfig()->setType(DbExecutionType::INSERT);
    $this->dbConfig()->setInsertColumnsClause($this->BuildClauseStatement($object), array($this::INSERTCOLUMNS));
    $this->dbConfig()->setInsertValuesClause($this->BuildClauseStatement($object), array($this::INSERTVALUES));
    $this->dbConfig()->BuildInsertQuery();
    return $this->BindParametersAndExecute($object, NULL);
  }

  /**
   * Edit method to update a item into DB
   *
   * @param object $item
   */
  public function edit($object, $whereFilterId) {
    $this->dbConfig()->setTableName($this->GetTableName($object));
    $this->dbConfig()->setType(DbExecutionType::UPDATE);
    $this->dbConfig()->setUpdateClause($this->BuildClauseStatement($object));
    $this->dbConfig()->setWhereClause($this->BuildClauseStatement($object, array($whereFilterId)));
    $this->dbConfig()->BuildUpdateQuery();
    return $this->BindParametersAndExecute($object, $whereFilterId);
  }

  /**
   * Add method to delete a item to DB
   *
   * @param int $identifier
   */
  public function delete($object, $where_filter_id) {
    $this->dbConfig()->setTYpe(DbExecutionType::DELETE);
    $delete_clause = "DELETE from `" . $this->GetTableName($object) . "` WHERE $where_filter_id = " . $object->$where_filter_id() . ";";
    $sth = $this->dao->prepare($delete_clause);
    return $this->ExecuteQuery($sth, $params);
  }

  public function GetRoutesDetails($objects) {
    $sql = "";
    foreach ($objects as $object) {
      $tableName = $this->GetTableName($object);
      $sql .= "SELECT " . $this->BuildClauseStatement($object) . " FROM " . $tableName;
    }
    $dbStatement = $this->dao->prepare($sql);
    return $this->ExecuteQuery($dbStatement, array("type" => DbExecutionType::MULTIROWSET));
  }

  private function BuildClauseStatement($object, $filters = array()) {
    $result = "";
    foreach ((array) $object as $property => $value) {
      if (count($filters) === 0) {
        $result .= "`$property` = :$property,";
      } elseif (count($filters) > 0 && in_array($property, $filters)) {
        $result .= "`$property` = :$property,";
      } elseif (in_array($this::INSERTCOLUMNS, $filters)) {
        $result .= "`$property`,";
      } elseif (in_array($this::INSERTVALUES, $filters)) {
        $result .= ":$property,";
      }
    }
    return rtrim($result, ",");
  }

  private function BindParametersAndExecute($object, $whereFilterId) {
    $dbStatement = $this->dao->prepare($this->dbConfig()->query());
    foreach ((array) $object as $property => $value) {
      switch ($property) {
        case $whereFilterId:
          $dbStatement->bindValue(":$property", $value, \PDO::PARAM_INT);
          break;
        default:
          $dbStatement->bindValue(":$property", $value);
          break;
      }
    }
    return $this->ExecuteQuery($dbStatement);
  }

  protected function GetTableName($object) {
    return \Library\Helpers\CommonHelper::GetShortClassName($object);
  }

  protected function ExecuteQuery($dbStatement) {
    $result = -2;
    try {
      $query = $dbStatement->execute();
      if (!$query) {
        $result = $query->errorCode();
      } else {
        switch ($this->dbConfig()->type()) {
          case DbExecutionType::SELECT:
            $dbStatement->setFetchMode(\PDO::FETCH_CLASS | \PDO::FETCH_PROPS_LATE, $this->dbConfig()->daoClassName());
            $list = $dbStatement->fetchAll();
            $dbStatement->closeCursor();
            $result = count($list) > 0 ? $list : array();
            break;
          case DbExecutionType::UPDATE:
          case DbExecutionType::DELETE:
            $result = TRUE;
            break;
          case DbExecutionType::INSERT:
            $result = $this->dao->lastInsertId();
            break;
          case DbExecutionType::SHOWTABLES:
            $result = $dbStatement->fetchAll(\PDO::FETCH_NUM);
            break;
          case DbExecutionType::COLUMNNAMES:
            $result = $dbStatement->fetchAll(\PDO::FETCH_COLUMN);
            break;
          case DbExecutionType::COLUMNMETAS:
            $result = $dbStatement->fetchAll();
            break;
          case DbExecutionType::MULTIROWSET:

          default:

            break;
        }
      }
      $dbStatement->closeCursor();
    } catch (\PDOException $exception) {
      json_encode($exception);
      //echo "<!--" . $pdo_ex->getMessage() . "-->";
      $result .= $exception->getCode();
    }
    return $result;
  }

}

